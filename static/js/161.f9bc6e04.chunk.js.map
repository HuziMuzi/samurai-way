{"version":3,"file":"static/js/161.f9bc6e04.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPost/Post/Posts.module.css?d103","components/Profile/MyPost/Post/Posts.tsx","../node_modules/redux-form/es/Form.js","components/Profile/MyPost/MyPosts.tsx","components/Profile/MyPost/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Profile_item__9Ddj7\",\"bg_img\":\"Profile_bg_img__Tse0E\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus?: (status: string) => any\n}\n\nfunction ProfileStatus(props: ProfileStatusType) {\n    const [editMode, setEditMod] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    const activeEditMode = () => {\n        setEditMod(true)\n    }\n\n    const deactivateActiveEditMode = () => {\n        setEditMod(false)\n        props.updateStatus && props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activeEditMode}>Статус: {props.status || '--------'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateActiveEditMode} type=\"text\"\n                           value={status}/>\n                </div>\n            }\n        </div>\n    )\n};\n\n\nexport default ProfileStatus;","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {userType} from \"../../../Redux/profile-reducer\";\nimport ProfileStatus from \"./ProfileStatus\";\n\n\ntype profileInfoPropsType = {\n    profile: userType | null\n    status : string\n    updateStatus : (status: string) => any\n}\nexport const ProfileInfo = (props: profileInfoPropsType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <img width={'150px'}\n                 src={props.profile.photos.large}\n                 alt=\"\"/>\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            <div className={s.descriptionBlock}>\n                <h2 className={s.name}>{props.profile.fullName}</h2>\n                <p>status Job:  {props.profile.lookingForAJob}</p>\n                <p></p>\n                <p>About me</p>\n                <p>City: Minsk</p>\n                <p>Education: BSU'11</p>\n                <p>Web Site: https://it-kamasutra.com</p>\n            </div>\n        </div>\n    );\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postman\":\"Posts_postman__kGKEs\"};","import React from 'react';\nimport s from './Posts.module.css'\n\ntype PostsPropsMessage = {\n    message: string\n    likes: number\n}\n\nexport const Posts = (props: PostsPropsMessage) => {\n    return (\n        <>\n            <div className={s.postman}>\n                <img width={'150px'}\n                     src=\"https://www.thehedgescompany.com/hedges/wp-content/uploads/2016/04/Man-at-computer-no-attribution.jpg\"\n                     alt=\"avatar\"/>\n                <p>{props.message}</p>\n\n            </div>\n            <div> Likes:{props.likes}</div>\n        </>\n    )\n};\n\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withReduxForm } from './ReduxFormContext';\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    if (!props._reduxForm) {\n      throw new Error('Form must be inside a component decorated with reduxForm()');\n    }\n\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onSubmit !== prevProps.onSubmit) {\n      this.props._reduxForm.registerInnerOnSubmit(this.props.onSubmit);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _reduxForm = _this$props._reduxForm,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"_reduxForm\"]);\n\n    return /*#__PURE__*/React.createElement(\"form\", rest);\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  _reduxForm: PropTypes.object\n};\nexport default withReduxForm(Form);","import React from 'react';\nimport {Posts} from \"./Post/Posts\";\nimport {Field, Form, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validator\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nexport type PostDataType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\ntype MyPostsPropsType = {\n    posts: Array<PostDataType>\n    addPost: (value: string) => void\n}\n\n\nexport const MyPosts = (props: MyPostsPropsType) => {\n    let postsElement = props.posts.map((post, index) =>\n        <Posts\n            key={index}\n            message={post.message}\n            likes={post.likesCount}\n        />\n    )\n\n    const onSubmitPost = (value:string) => {\n        props.addPost(value)\n    }\n\n    return (\n        <>\n            <div>\n                <MyPostsForm onSubmit={onSubmitPost}/>\n            </div>\n            <div>New post:\n                {postsElement}\n            </div>\n        </>\n    )\n};\n\ntype formDataType = {\n    newPostText: string\n}\n\n\nconst maxLength10 = maxLengthCreator(10)\n\n\nconst PostsAddForm = (props: InjectedFormProps<formDataType>) => {\n    return (\n        <Form onSubmit={props.handleSubmit}>\n            <Field\n                name={'newPostText'}\n                placeholder='Текст поста'\n                component={Textarea}\n                validate={[required, maxLength10]}\n            />\n            <div>\n                <button>Add post</button>\n            </div>\n        </Form>\n    )\n}\n\nconst PostsAddReduxForm = reduxForm<formDataType>({\n    form: \"newPostText\"\n})(PostsAddForm)\n\n\ntype MyPostsFormPropsType = {\n    onSubmit: (value: string) => void\n}\nconst MyPostsForm = (props: MyPostsFormPropsType) => {\n    const onSubmitForm = (value:formDataType) => {\n        props.onSubmit(value.newPostText)\n    }\n    return (\n        <>\n            <h3>My posts</h3>\n            <PostsAddReduxForm onSubmit={onSubmitForm}/>\n        </>\n    )\n}","import React from 'react';\nimport {AddPostAC} from \"../../../Redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppRootState} from \"../../../Redux/redux-store\";\nimport {Dispatch} from \"redux\";\n\nconst mapStateToProps = (state: AppRootState) => {\n    return {\n        posts: state.profileReducer.posts,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: (value: string) => {\n            dispatch(AddPostAC(value))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts)\n\n","import React from 'react';\nimport s from './Profile.module.css'\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPost/MyPostsContainer\";\nimport {userType} from \"../../Redux/profile-reducer\";\n\ntype ProfilePropsType = {\n    profile: userType | null\n    status: string\n    updateStatus : (status: string) => any\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n\n\n    return <div className={s.content}>\n                    {/*<img className={s.bg_img}*/}\n                    {/*     src=\"https://cdn.pixabay.com/photo/2013/11/15/13/57/road-210913_960_720.jpg\" alt=\"\"/>*/}\n                <ProfileInfo\n                    profile={props.profile}\n                    status={props.status}\n                    updateStatus={props.updateStatus}\n                />\n                <MyPostsContainer/>\n            </div>\n}\n\n","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppRootState} from \"../../Redux/redux-store\";\nimport {\n    getProfileThunk,\n    getUserStatusThunk,\n    setUserProfile,\n    updateUserStatusThunk,\n    userType\n} from \"../../Redux/profile-reducer\";\nimport { RouteComponentProps, withRouter} from \"react-router-dom\";\nimport WithAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype PathParamsType = {\n    userId: string\n}\nexport type PropsType = RouteComponentProps<PathParamsType> & ownPropsType\ntype ownPropsType = mapStateToProps & mapDispatchToProps\nexport type mapStateToProps = {\n    profile: userType | null\n    status : string\n    autorizedUserId: number | null\n    isAuth : boolean\n}\nexport type mapDispatchToProps = {\n    setUserProfile: (profile: userType) => void\n    getProfileThunk: (userId: string) => void\n    getUserStatusThunk : (userId: string) => void\n    updateUserStatusThunk : (status: string) => void\n}\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId){\n            userId = `${this.props.autorizedUserId}`\n            if(!userId) {\n                this.props.history.push('./login')\n            }\n    }\n        this.props.getProfileThunk(userId)\n        this.props.getUserStatusThunk(userId)\n    }\n\n    render() {\n        return (\n            <>\n                <Profile\n                    profile={this.props.profile}\n                    status={this.props.status}\n                    updateStatus={this.props.updateUserStatusThunk}\n                />\n            </>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state: AppRootState): mapStateToProps => {\n    return {\n        profile: state.profileReducer.profile,\n        status: state.profileReducer.status,\n        autorizedUserId :  state.authReducer.id,\n        isAuth : state.authReducer.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {setUserProfile, getProfileThunk,\n        getUserStatusThunk,updateUserStatusThunk}),\n    withRouter,\n    WithAuthRedirect\n)(ProfileContainer)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootState} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToProps = {\n    isAuth: boolean\n}\nlet mapStateToProps = (state: AppRootState): mapStateToProps => {\n    return {\n        isAuth: state.authReducer.isAuth\n    }\n}\n\n\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\n    function authRedirect(props: mapStateToProps) {\n        let {isAuth, ...rest} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...rest as T}/>\n    }\n\n    return connect(mapStateToProps)(authRedirect)\n}\n\n\nexport default WithAuthRedirect;"],"names":["props","useState","editMode","setEditMod","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileInfo","profile","width","src","photos","large","alt","className","s","fullName","lookingForAJob","Preloader","Posts","message","likes","Form","_Component","_this","call","this","_reduxForm","Error","_inheritsLoose","_proto","prototype","componentDidMount","registerInnerOnSubmit","onSubmit","componentDidUpdate","prevProps","render","_this$props","rest","_objectWithoutPropertiesLoose","React","Component","propTypes","PropTypes","withReduxForm","maxLength10","maxLengthCreator","PostsAddReduxForm","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsForm","newPostText","MyPostsContainer","connect","state","posts","profileReducer","dispatch","addPost","AddPostAC","postsElement","map","post","index","likesCount","Profile","ProfileContainer","userId","match","params","autorizedUserId","history","push","getProfileThunk","getUserStatusThunk","updateUserStatusThunk","compose","authReducer","id","isAuth","setUserProfile","withRouter","WithAuthRedirect","mapStateToProps","to"],"sourceRoot":""}