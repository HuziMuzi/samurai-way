{"version":3,"file":"static/js/2.dfcd4399.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAA2K,0BAA3K,EAA+M,yB,UCA/M,EAAuE,2BAAvE,EAA2G,2B,SCQ9FA,EAAa,SAACC,GACvB,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAE,mBAAcH,EAAMI,IAA/B,SAAsCJ,EAAMK,UCL3CC,EAAU,SAACN,GACpB,OAAO,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMO,Q,uCCOvCC,GAAcC,EAAAA,EAAAA,GAAiB,IAoB/BC,GAAmBC,EAAAA,EAAAA,GAAwB,CAC7CC,KAAM,WADeD,EAlBH,SAACX,GACnB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,YAAa,kBACbX,KAAM,UACNY,SAAU,CAACC,EAAAA,EAASV,GACpBW,UAAWC,EAAAA,OAEnB,0BACI,+FAwBhB,EAR2B,SAACpB,GAKxB,OAAO,SAACU,EAAD,CAAkBG,SAJH,SAACQ,GACnBrB,EAAMa,SAASQ,GACfC,QAAQC,IAAIF,OCepB,EAtCgB,SAACrB,GAEb,IAAMwB,EAAkBxB,EAAMyB,aAAaC,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAAC7B,EAAD,CAA4BK,GAAIwB,EAAOxB,GAClCC,KAAMuB,EAAOvB,MADDuB,EAAOxB,OAEnFyB,EAAmB7B,EAAMyB,aAAaK,SAASH,KAAI,SAAAI,GAAG,OAAI,SAACzB,EAAD,CAAsBC,KAAMwB,EAAIxB,MAAlBwB,EAAI3B,OAQlF,OAEI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKsB,KAEL,iBAAKvB,UAAWC,EAAhB,UACK2B,GACD,0BACI,SAAC,EAAD,CAAahB,SAZP,SAACmB,GACnBhC,EAAMiC,cAAcD,EAAOE,qB,8BCenC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAboB,SAACC,GACrB,MAAO,CACHZ,aAAcY,EAAMC,mBAGD,SAACC,GACxB,MAAO,CACHN,cAAe,SAACO,GACZD,GAASE,EAAAA,EAAAA,GAAcD,SAM/BE,EAAAA,EAFJ,CAGEC,I,iGC3CEC,EAAkB,SAACP,GACnB,MAAO,CACHQ,OAAQR,EAAMS,YAAYD,SAgBlC,IAXO,SAA8BE,GAOjC,OAAOX,EAAAA,EAAAA,IAAQQ,EAARR,EANP,SAAsBpC,GAClB,IAAK6C,EAAmB7C,EAAnB6C,OAAWG,GAAhB,OAAwBhD,EAAxB,GACA,OAAK6C,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU7C,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogsItem\":\"Dialogs_dialogsItem__VE52U\",\"active\":\"Dialogs_active__t8cjl\",\"dialog\":\"Dialogs_dialog__htSTl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogsItem\":\"DialogItem_dialogsItem__w4bKB\",\"active\":\"DialogItem_active__wvgh9\",\"dialog\":\"DialogItem_dialog__gU34-\"};","import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport s from './DialogItem.module.css'\n\nexport type DialogItem = {\n    id: number\n    name: string\n}\n\nexport const DialogItem = (props: DialogItem) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={`/Dialogs/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import React from 'react';\nimport s from './../Dialogs.module.css'\n\nexport type MessagePropsType = {\n    text: string\n}\n\nexport const Message = (props: MessagePropsType) => {\n    return <div className={s.message}>{props.text}</div>\n}\n\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\n\ntype dialogsFormPropsType = {\n    newMessageText: string\n    newMessageChangeTextArea: () => void\n    toSentMessageHandler: () => void\n}\n\nexport type formDataType = {\n    message: string\n}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst DialogsFields = (props: InjectedFormProps<formDataType>) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    placeholder={'Enter your text'}\n                    name={'message'}\n                    validate={[required,maxLength50]}\n                    component={Textarea}/>\n            </div>\n            <div>\n                <button>Отправить</button>\n            </div>\n        </form>\n    );\n};\n\n\nconst DialogsReduxForm = reduxForm<formDataType>({\n    form: 'message'\n})(DialogsFields)\n\n\ntype DialogsFormPropsType = {\n    onSubmit : (formData:formDataType) => void\n}\n\nexport const DialogsForm = (props: DialogsFormPropsType) => {\n    const onClickSubmit = (formData:formDataType) => {\n        props.onSubmit(formData)\n        console.log(formData)\n    }\n    return <DialogsReduxForm onSubmit={onClickSubmit}/>\n};\n\nexport default DialogsForm;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport DialogsForm, {formDataType} from \"./DialogsForm\";\n\nexport type DialogsDataType = {\n    id: number\n    name: string\n}\n\nexport type MessageDataType = {\n    id: number\n    text: string\n}\n\nexport type DialogsPropsType = {\n    dialogsState: {\n        dialogs: Array<DialogsDataType>\n        messages: Array<MessageDataType>\n    }\n    toSendMessage: (value: string) => void\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n\n    const dialogsElements = props.dialogsState.dialogs.map(dialog => <DialogItem key={dialog.id} id={dialog.id}\n                                                                          name={dialog.name}/>)\n    const messagesElements = props.dialogsState.messages.map(mes => <Message key={mes.id} text={mes.text}/>)\n\n\n\n\n    const addNewMessage = (values:formDataType) => {\n        props.toSendMessage(values.message)\n    }\n    return (\n        \n        <div className={s.dialogs}>\n            <div className={s.dialogsItem}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n                <div>\n                    <DialogsForm onSubmit={addNewMessage}/>\n                    {/*<form>*/}\n                    {/*    <div>*/}\n                    {/*    <textarea value={newMessageText} placeholder={'Enter your text'}*/}\n                    {/*              onChange={newMessageChangeTextArea}></textarea>*/}\n                    {/*    </div>*/}\n                    {/*    <div>*/}\n                    {/*        <button onClick={toSentMessageHandler}>Отправить</button>*/}\n                    {/*    </div>*/}\n                    {/*</form>*/}\n                </div>\n            </div>\n\n        </div>\n    );\n};\n\nexport default Dialogs;","\nimport {SendMessageAC} from \"../../Redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppRootState} from \"../../Redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\n\nimport WithAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport React from \"react\";\n\n\n// const DialogsContainer = (props: DialogsContainerPropsType) => {\n//     const dialogsState = useSelector<AppRootState, initialStateTypeDialogs>(state => state.dialogsReducer)\n//     const dispatch = useDispatch()\n//\n//     const toSendMessage = () => {\n//         dispatch(SendMessageAC())\n//     }\n//\n//     const onNewMessageChange = (value: string) => {\n//         dispatch(UpdateNewMessageTextAC(value))\n//     }\n//\n//     return (\n//\n//         <Dialogs\n//             dialogsState={dialogsState}\n//             toSendMessage={toSendMessage}\n//             onNewMessageChange={onNewMessageChange}\n//         />\n//     );\n// };\n// const AuthRedirectComponent = (props:DialogsPropsType) => {\n//     if (!props.isAuth) return <Redirect to={'/login'}/>\n//     return <Dialogs  {...props}/>\n// }\n\nconst mapStateToProps = (state: AppRootState) => {\n    return {\n        dialogsState: state.dialogsReducer,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        toSendMessage: (value: string) => {\n            dispatch(SendMessageAC(value))\n        }\n    }\n}\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    WithAuthRedirect\n)(Dialogs)","import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootState} from \"../Redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToProps = {\n    isAuth: boolean\n}\nlet mapStateToProps = (state: AppRootState): mapStateToProps => {\n    return {\n        isAuth: state.authReducer.isAuth\n    }\n}\n\n\nexport function WithAuthRedirect <T>(Component: ComponentType<T>) {\n    function authRedirect(props: mapStateToProps) {\n        let {isAuth, ...rest} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...rest as T}/>\n    }\n\n    return connect(mapStateToProps)(authRedirect)\n}\n\n\nexport default WithAuthRedirect;"],"names":["DialogItem","props","className","s","to","id","name","Message","text","maxLength50","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","validate","required","component","Textarea","formData","console","log","dialogsElements","dialogsState","dialogs","map","dialog","messagesElements","messages","mes","values","toSendMessage","message","compose","connect","state","dialogsReducer","dispatch","value","SendMessageAC","WithAuthRedirect","Dialogs","mapStateToProps","isAuth","authReducer","Component","rest"],"sourceRoot":""}